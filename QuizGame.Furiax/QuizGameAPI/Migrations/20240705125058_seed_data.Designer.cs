// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizGameAPI.Data;

#nullable disable

namespace QuizGameAPI.Migrations
{
    [DbContext(typeof(QuizGameContext))]
    [Migration("20240705125058_seed_data")]
    partial class seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizGameAPI.Models.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("QuizId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("QuizGameAPI.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionToAsk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("5b2ce823-2c64-4532-a405-e92cf464fcae"),
                            CorrectAnswer = "Brussels",
                            Option1 = "Antwerp",
                            Option2 = "Ghent",
                            Option3 = "Brussels",
                            Option4 = "Brugge",
                            QuestionToAsk = "What is the capital of Belgium?",
                            QuizId = new Guid("409aa05a-de77-470b-929b-10b250cdffa4")
                        },
                        new
                        {
                            QuestionId = new Guid("c5ec747f-8034-4ea3-90ba-d39d6da20542"),
                            CorrectAnswer = "Argentina",
                            Option1 = "Argentina",
                            Option2 = "Croatia",
                            Option3 = "France",
                            Option4 = "Marocco",
                            QuestionToAsk = "Who won WK2022 in Qatar ?",
                            QuizId = new Guid("0cd38b82-8078-4d71-912d-c224ce52d5e5")
                        });
                });

            modelBuilder.Entity("QuizGameAPI.Models.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizId = new Guid("409aa05a-de77-470b-929b-10b250cdffa4"),
                            QuizName = "General Knowledge"
                        },
                        new
                        {
                            QuizId = new Guid("0cd38b82-8078-4d71-912d-c224ce52d5e5"),
                            QuizName = "Football"
                        });
                });

            modelBuilder.Entity("QuizGameAPI.Models.Game", b =>
                {
                    b.HasOne("QuizGameAPI.Models.Quiz", "Quiz")
                        .WithMany("Games")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizGameAPI.Models.Question", b =>
                {
                    b.HasOne("QuizGameAPI.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizGameAPI.Models.Quiz", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
